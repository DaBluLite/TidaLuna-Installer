name: Update Releases JSON

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  update-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install axios semver

      - name: Generate releases.json
        run: |
          node -e "
          const axios = require('axios');
          const semver = require('semver');
          const fs = require('fs');

          (async () => {
              const res = await axios.get('https://api.github.com/repos/Inrixia/TidaLuna/releases');
              const releases = res.data;

              const channels = {};
              const semverReleases = [];

              for (const rel of releases) {
                  const tag = rel.tag_name;
                  const zip = rel.assets.find(a => a.name === 'luna.zip');
                  if (!zip) continue;

                  const url = zip.browser_download_url;
                  const gh = rel.html_url;

                  if (semver.valid(tag)) {
                      semverReleases.push({ version: tag, url, githubUrl: gh });
                  } else {
                      const match = tag.match(/^([a-zA-Z]+)-?(\d+\.\d+\.\d+)?$/);
                      const channel = match ? match[1] : tag;
                      channels[channel] = channels[channel] || [];
                      channels[channel].push({ version: tag, url, githubUrl: gh });
                  }
              }

              if (semverReleases.length > 0) {
                  const latest = semverReleases.sort((a, b) => semver.rcompare(a.version, b.version))[0];
                  channels['semantic'] = [latest];
              }

              const output = [];
              let id = 1;

              for (const [channel, items] of Object.entries(channels)) {
                  for (const item of items) {
                      output.push({
                          name: channel === 'semantic' ? item.version : channel,
                          download: item.url,
                          githubUrl: item.githubUrl,
                          version: item.version,
                          id: id++
                      });
                  }
              }

              const newJson = JSON.stringify(output, null, 4);
              const oldJson = fs.existsSync('releases.json') ? fs.readFileSync('releases.json', 'utf8') : '';
              if (newJson.trim() !== oldJson.trim()) {
                  fs.writeFileSync('releases.json', newJson);
                  fs.writeFileSync('changed.txt', 'yes');
              }
          })();
          "

      - name: Create PR if changed
        if: success() && hashFiles('changed.txt') != ''
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Update releases.json with latest releases"
          title: "Update releases.json"
          body: "Automatically updated releases.json from upstream releases."
          branch: update-releases
          base: main
          add-paths: |
            releases.json
