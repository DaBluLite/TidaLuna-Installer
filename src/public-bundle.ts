
// This file is auto-generated and contains assets used on the frontend encoded in base64.
export const publicAssets: Record<string, string> = {
  "index.html": "PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQoNCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPHRpdGxlPlRpZGFMdW5hIEluc3RhbGxlcjwvdGl0bGU+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzdHlsZXMuY3NzIj4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEAzMDA7NDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcCI+DQo8L2hlYWQ+DQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIDxkaXYgY2xhc3M9ImFwcC1jb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgICAgICA8aDE+VGlkYUx1bmEgSW5zdGFsbGVyPC9oMT4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtZS10b2dnbGUiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGhlbWUtaWNvbiBsaWdodCI+4piA77iPPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGhlbWUtaWNvbiBkYXJrIj7wn4yZPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9oZWFkZXI+DQoNCiAgICAgICAgICAgIDwhLS0gU2V0dXAgU2NyZWVuIC0tPg0KICAgICAgICAgICAgPGRpdiBpZD0ic2V0dXAtc2NyZWVuIiBjbGFzcz0ic2NyZWVuIGFjdGl2ZSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5HbG9iYWwgTG9nPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZ2xvYmFsLWxvZyIgY2xhc3M9ImxvZy1jb250YWluZXIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5SZWxlYXNlIENoYW5uZWw8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxlYXNlLWNhcmRzIiBjbGFzcz0icmVsZWFzZS1jYXJkcy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBSZWxlYXNlIGNhcmRzIHdpbGwgYmUgcG9wdWxhdGVkIGR5bmFtaWNhbGx5IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVsZWFzZS1jYXJkIGxvYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlbGVhc2UtY2FyZC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+TG9hZGluZy4uLjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICAgICAgPGgyPkluc3RhbGxhdGlvbiBPcHRpb25zPC9oMj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkFkdmFuY2VkIE9wdGlvbnM8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhY2NvcmRpb24taWNvbiI+Kzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjdXN0b20tcGF0aCI+Q3VzdG9tIEluc3RhbGwgUGF0aCAoT3B0aW9uYWwpPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjdXN0b20tcGF0aCIgcGxhY2Vob2xkZXI9IlBhdGggdG8gcmVzb3VyY2VzIGZvbGRlciBpbiBhcHAteC54LngiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaGVscC10ZXh0Ij5Pbmx5IHJlcXVpcmVkIGlmIGluc3RhbGxhdGlvbiBmYWlscy4gUGF0aCBzaG91bGQgcG9pbnQgdG8gdGhlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgZm9sZGVyIGluc2lkZSB0aGUgYXBwLVt2ZXJzaW9uXSBmb2xkZXIuIFVzZSB0aGUgbGF0ZXN0IHNlbWFudGljIHZlcnNpb24uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iaW5zdGFsbC1idG4iIGNsYXNzPSJidG4gcHJpbWFyeSI+SW5zdGFsbDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0idW5pbnN0YWxsLWJ0biIgY2xhc3M9ImJ0biBzZWNvbmRhcnkiPlVuaW5zdGFsbDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8IS0tIFByb2dyZXNzIFNjcmVlbiAtLT4NCiAgICAgICAgICAgIDxkaXYgaWQ9InByb2dyZXNzLXNjcmVlbiIgY2xhc3M9InNjcmVlbiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5HbG9iYWwgTG9nPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZ3Jlc3MtZ2xvYmFsLWxvZyIgY2xhc3M9ImxvZy1jb250YWluZXIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5JbnN0YWxsYXRpb24gUHJvZ3Jlc3M8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzdGVwcy1jb250YWluZXIiIGNsYXNzPSJzdGVwcy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdGVwcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbi1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImJhY2stYnRuIiBjbGFzcz0iYnRuIHNlY29uZGFyeSI+QmFjayB0byBTZXR1cDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2p4bnhzZGV2L1RpZGFMdW5hLUluc3RhbGxlciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJnaXRodWItbGluayI+DQogICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMjQiIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSINCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZT0iY3VycmVudENvbG9yIiBzdHJva2Utd2lkdGg9IjIiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCINCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJnaXRodWItaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik05IDE5Yy01IDEuNS01LTIuNS03LTNtMTQgNnYtMy44N2EzLjM3IDMuMzcgMCAwIDAtLjk0LTIuNjFjMy4xNC0uMzUgNi40NC0xLjU0IDYuNDQtN0E1LjQ0IDUuNDQgMCAwIDAgMjAgNC43NyA1LjA3IDUuMDcgMCAwIDAgMTkuOTEgMVMxOC43My42NSAxNiAyLjQ4YTEzLjM4IDEzLjM4IDAgMCAwLTcgMEM2LjI3LjY1IDUuMDkgMSA1LjA5IDFBNS4wNyA1LjA3IDAgMCAwIDUgNC43N2E1LjQ0IDUuNDQgMCAwIDAtMS41IDMuNzhjMCA1LjQyIDMuMyA2LjYxIDYuNDQgN0EzLjM3IDMuMzcgMCAwIDAgOSAxOC4xM1YyMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3BhdGg+DQogICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgICAgICBqeG54c2Rldi9UaWRhTHVuYS1JbnN0YWxsZXINCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJwYXJ0aWNsZXMtY29udGFpbmVyIj4NCiAgICAgICAgPGNhbnZhcyBpZD0icGFydGljbGVzIj48L2NhbnZhcz4NCiAgICA8L2Rpdj4NCg0KICAgIDxzY3JpcHQgc3JjPSJzY3JpcHQuanMiPjwvc2NyaXB0Pg0KPC9ib2R5Pg0KDQo8L2h0bWw+",
  "script.js": "",
  "styles.css": ""
};
