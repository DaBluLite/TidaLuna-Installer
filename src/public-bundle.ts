
// This file is auto-generated and contains assets used on the frontend encoded in base64.
export const publicAssets: Record<string, string> = {
  "index.html": "PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQoNCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPHRpdGxlPlRpZGFMdW5hIEluc3RhbGxlcjwvdGl0bGU+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzdHlsZXMuY3NzIj4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEAzMDA7NDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcCI+DQo8L2hlYWQ+DQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIDxkaXYgY2xhc3M9ImFwcC1jb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgICAgICA8aDE+VGlkYUx1bmEgSW5zdGFsbGVyPC9oMT4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtZS10b2dnbGUiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGhlbWUtaWNvbiBsaWdodCI+4piA77iPPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGhlbWUtaWNvbiBkYXJrIj7wn4yZPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9oZWFkZXI+DQoNCiAgICAgICAgICAgIDwhLS0gU2V0dXAgU2NyZWVuIC0tPg0KICAgICAgICAgICAgPGRpdiBpZD0ic2V0dXAtc2NyZWVuIiBjbGFzcz0ic2NyZWVuIGFjdGl2ZSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5HbG9iYWwgTG9nPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZ2xvYmFsLWxvZyIgY2xhc3M9ImxvZy1jb250YWluZXIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5SZWxlYXNlIENoYW5uZWw8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxlYXNlLWNhcmRzIiBjbGFzcz0icmVsZWFzZS1jYXJkcy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBSZWxlYXNlIGNhcmRzIHdpbGwgYmUgcG9wdWxhdGVkIGR5bmFtaWNhbGx5IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVsZWFzZS1jYXJkIGxvYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlbGVhc2UtY2FyZC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+TG9hZGluZy4uLjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICAgICAgPGgyPkluc3RhbGxhdGlvbiBPcHRpb25zPC9oMj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkFkdmFuY2VkIE9wdGlvbnM8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhY2NvcmRpb24taWNvbiI+Kzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjdXN0b20tcGF0aCI+Q3VzdG9tIEluc3RhbGwgUGF0aCAoT3B0aW9uYWwpPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjdXN0b20tcGF0aCIgcGxhY2Vob2xkZXI9IlBhdGggdG8gcmVzb3VyY2VzIGZvbGRlciBpbiBhcHAteC54LngiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaGVscC10ZXh0Ij5Pbmx5IHJlcXVpcmVkIGlmIGluc3RhbGxhdGlvbiBmYWlscy4gUGF0aCBzaG91bGQgcG9pbnQgdG8gdGhlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgZm9sZGVyIGluc2lkZSB0aGUgYXBwLVt2ZXJzaW9uXSBmb2xkZXIuIFVzZSB0aGUgbGF0ZXN0IHNlbWFudGljIHZlcnNpb24uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iaW5zdGFsbC1idG4iIGNsYXNzPSJidG4gcHJpbWFyeSI+SW5zdGFsbDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0idW5pbnN0YWxsLWJ0biIgY2xhc3M9ImJ0biBzZWNvbmRhcnkiPlVuaW5zdGFsbDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8IS0tIFByb2dyZXNzIFNjcmVlbiAtLT4NCiAgICAgICAgICAgIDxkaXYgaWQ9InByb2dyZXNzLXNjcmVlbiIgY2xhc3M9InNjcmVlbiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5HbG9iYWwgTG9nPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZ3Jlc3MtZ2xvYmFsLWxvZyIgY2xhc3M9ImxvZy1jb250YWluZXIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxoMj5JbnN0YWxsYXRpb24gUHJvZ3Jlc3M8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzdGVwcy1jb250YWluZXIiIGNsYXNzPSJzdGVwcy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdGVwcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbi1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImJhY2stYnRuIiBjbGFzcz0iYnRuIHNlY29uZGFyeSI+QmFjayB0byBTZXR1cDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2p4bnhzZGV2L1RpZGFMdW5hLUluc3RhbGxlciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJnaXRodWItbGluayI+DQogICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMjQiIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSINCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZT0iY3VycmVudENvbG9yIiBzdHJva2Utd2lkdGg9IjIiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCINCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJnaXRodWItaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik05IDE5Yy01IDEuNS01LTIuNS03LTNtMTQgNnYtMy44N2EzLjM3IDMuMzcgMCAwIDAtLjk0LTIuNjFjMy4xNC0uMzUgNi40NC0xLjU0IDYuNDQtN0E1LjQ0IDUuNDQgMCAwIDAgMjAgNC43NyA1LjA3IDUuMDcgMCAwIDAgMTkuOTEgMVMxOC43My42NSAxNiAyLjQ4YTEzLjM4IDEzLjM4IDAgMCAwLTcgMEM2LjI3LjY1IDUuMDkgMSA1LjA5IDFBNS4wNyA1LjA3IDAgMCAwIDUgNC43N2E1LjQ0IDUuNDQgMCAwIDAtMS41IDMuNzhjMCA1LjQyIDMuMyA2LjYxIDYuNDQgN0EzLjM3IDMuMzcgMCAwIDAgOSAxOC4xM1YyMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3BhdGg+DQogICAgICAgICAgICAgICAgICAgIDwvc3ZnPg0KICAgICAgICAgICAgICAgICAgICBqeG54c2Rldi9UaWRhTHVuYS1JbnN0YWxsZXINCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJwYXJ0aWNsZXMtY29udGFpbmVyIj4NCiAgICAgICAgPGNhbnZhcyBpZD0icGFydGljbGVzIj48L2NhbnZhcz4NCiAgICA8L2Rpdj4NCg0KICAgIDxzY3JpcHQgc3JjPSJzY3JpcHQuanMiPjwvc2NyaXB0Pg0KPC9ib2R5Pg0KDQo8L2h0bWw+",
  "script.js": "Ly8gRE9NIEVsZW1lbnRzDQpjb25zdCBzZXR1cFNjcmVlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZXR1cC1zY3JlZW4iKQ0KY29uc3QgcHJvZ3Jlc3NTY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJvZ3Jlc3Mtc2NyZWVuIikNCmNvbnN0IGluc3RhbGxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5zdGFsbC1idG4iKQ0KY29uc3QgdW5pbnN0YWxsQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVuaW5zdGFsbC1idG4iKQ0KY29uc3QgYmFja0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJiYWNrLWJ0biIpDQpjb25zdCBjdXN0b21QYXRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImN1c3RvbS1wYXRoIikNCmNvbnN0IGdsb2JhbExvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJnbG9iYWwtbG9nIikNCmNvbnN0IHByb2dyZXNzR2xvYmFsTG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInByb2dyZXNzLWdsb2JhbC1sb2ciKQ0KY29uc3Qgc3RlcHNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RlcHMtY29udGFpbmVyIikNCmNvbnN0IHRoZW1lVG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnRoZW1lLXRvZ2dsZSIpDQpjb25zdCBhY2NvcmRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuYWNjb3JkaW9uIikNCmNvbnN0IGFjY29yZGlvbkhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hY2NvcmRpb24taGVhZGVyIikNCmNvbnN0IHJlbGVhc2VDYXJkc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZWxlYXNlLWNhcmRzIikNCg0KLy8gVXBkYXRlIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBzZWN0aW9uIHRvIGluY2x1ZGUgdmVyc2lvbiBzZWxlY3Rpb24NCmxldCBzb2NrZXQNCmxldCBpc0luc3RhbGxpbmcgPSBmYWxzZQ0KbGV0IHJlbGVhc2VzID0gW10NCmxldCBzZWxlY3RlZFJlbGVhc2UgPSBudWxsDQpsZXQgc2VsZWN0ZWRWZXJzaW9uID0gbnVsbA0KbGV0IGlzSW5zdGFsbGVkID0gZmFsc2UNCmxldCBjdXJyZW50U3RlcHMgPSBbXSAvLyBUcmFjayBjdXJyZW50IHN0ZXBzDQoNCi8vIEVudW0gdmFsdWVzIGZyb20geW91ciBzb3VyY2UgY29kZQ0KY29uc3QgU3RlcHMgPSB7DQogIFNFVFVQOiAiU0VUVVAiLA0KICBET1dOTE9BRElOR19MVU5BOiAiRE9XTkxPQURJTkdfTFVOQSIsDQogIEVYVFJBQ1RJTkdfTFVOQTogIkVYVFJBQ1RJTkdfTFVOQSIsDQogIENPUFlJTkdfQVNBUl9JTlNUQUxMOiAiQ09QWUlOR19BU0FSX0lOU1RBTEwiLA0KICBJTlNFUlRJTkdfTFVOQTogIklOU0VSVElOR19MVU5BIiwNCiAgVU5JTlNUQUxMSU5HOiAiVU5JTlNUQUxMSU5HIiwNCiAgQ09QWUlOR19BU0FSX1VOSU5TVEFMTDogIkNPUFlJTkdfQVNBUl9VTklOU1RBTEwiLA0KICBLSUxMSU5HX1RJREFMOiAiS0lMTElOR19USURBTCIsDQp9DQoNCmNvbnN0IFdlYnNvY2tldE1lc3NhZ2VUeXBlcyA9IHsNCiAgSU5TVEFMTF9MT0c6ICJpbnN0YWxsX2xvZyIsDQogIFNURVBfTE9HOiAic3RlcF9sb2ciLA0KICBTVEVQX1VQREFURTogInN0ZXBfdXBkYXRlIiwNCiAgSU5TVEFMTEFUSU9OX0NPTVBMRVRFOiAiaW5zdGFsbGF0aW9uX2NvbXBsZXRlIiwNCiAgSU5TVEFMTEFUSU9OX1NUQVJUOiAiaW5zdGFsbGF0aW9uX3N0YXJ0IiwNCiAgSU5TVEFMTEFUSU9OX0VSUk9SOiAiaW5zdGFsbGF0aW9uX2Vycm9yIiwNCn0NCg0KLy8gU3RlcCBkaXNwbGF5IG5hbWVzDQpjb25zdCBTdGVwTmFtZXMgPSB7DQogIFtTdGVwcy5TRVRVUF06ICJTZXR1cCIsDQogIFtTdGVwcy5LSUxMSU5HX1RJREFMXTogIlN0b3BwaW5nIFRJREFMIiwNCiAgW1N0ZXBzLkRPV05MT0FESU5HX0xVTkFdOiAiRG93bmxvYWRpbmcgVGlkYUx1bmEiLA0KICBbU3RlcHMuRVhUUkFDVElOR19MVU5BXTogIkV4dHJhY3RpbmcgVGlkYUx1bmEiLA0KICBbU3RlcHMuQ09QWUlOR19BU0FSX0lOU1RBTExdOiAiQ29weWluZyBBU0FSIGZpbGUiLA0KICBbU3RlcHMuQ09QWUlOR19BU0FSX1VOSU5TVEFMTF06ICJDb3B5aW5nIEFTQVIgZmlsZSIsDQogIFtTdGVwcy5JTlNFUlRJTkdfTFVOQV06ICJJbnN0YWxsaW5nIFRpZGFMdW5hIiwNCiAgW1N0ZXBzLlVOSU5TVEFMTElOR106ICJVbmluc3RhbGxpbmcgVGlkYUx1bmEiLA0KfQ0KDQovLyBJbml0aWFsaXplIHRoZSBhcHBsaWNhdGlvbg0KZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsICgpID0+IHsNCiAgaW5pdFRoZW1lKCkNCiAgaW5pdFdlYlNvY2tldCgpDQogIGluaXRFdmVudExpc3RlbmVycygpDQogIGluaXRQYXJ0aWNsZXMoKQ0KICBjaGVja0N1cnJlbnRTdGF0ZSgpDQogIGZldGNoUmVsZWFzZXMoKQ0KICBjaGVja0lmSW5zdGFsbGVkKCkNCiAgaW5pdEVhc3RlckVnZygpDQp9KQ0KDQovLyBBZGQgdGhlIEVhc3RlciBFZ2cgZnVuY3Rpb24NCmZ1bmN0aW9uIGluaXRFYXN0ZXJFZ2coKSB7DQogIGxldCBrZXlzID0gW10NCiAgY29uc3Qgd3RmU2VxdWVuY2UgPSAid3RmIg0KDQogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgKGUpID0+IHsNCiAgICAvLyBPbmx5IHRyYWNrIGFscGhhYmV0aWMga2V5cw0KICAgIGlmICgvXlthLXpdJC9pLnRlc3QoZS5rZXkpKSB7DQogICAgICBrZXlzLnB1c2goZS5rZXkudG9Mb3dlckNhc2UoKSkNCg0KICAgICAgLy8gS2VlcCBvbmx5IHRoZSBsYXN0IDMga2V5cw0KICAgICAgaWYgKGtleXMubGVuZ3RoID4gMykgew0KICAgICAgICBrZXlzID0ga2V5cy5zbGljZSgtMykNCiAgICAgIH0NCg0KICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlcXVlbmNlIG1hdGNoZXMgInd0ZiINCiAgICAgIGlmIChrZXlzLmpvaW4oIiIpID09PSB3dGZTZXF1ZW5jZSkgew0KICAgICAgICBleGVjdXRlV3RmTW9kZSgpDQogICAgICAgIGtleXMgPSBbXSAvLyBSZXNldCBhZnRlciB0cmlnZ2VyaW5nDQogICAgICB9DQogICAgfQ0KICB9KQ0KfQ0KDQpmdW5jdGlvbiBleGVjdXRlV3RmTW9kZSgpIHsNCiAgY29uc3QgZm9udHMgPSBbDQogICAgIkFyaWFsIiwNCiAgICAiVmVyZGFuYSIsDQogICAgIkhlbHZldGljYSIsDQogICAgIlRpbWVzIE5ldyBSb21hbiIsDQogICAgIkNvdXJpZXIgTmV3IiwNCiAgICAiR2VvcmdpYSIsDQogICAgIlRyZWJ1Y2hldCBNUyIsDQogICAgIkNvbWljIFNhbnMgTVMiLA0KICAgICJJbXBhY3QiLA0KICAgICJMdWNpZGEgQ29uc29sZSIsDQogICAgIlRhaG9tYSIsDQogICAgIlBhbGF0aW5vIExpbm90eXBlIiwNCiAgICAiU2Vnb2UgVUkiLA0KICAgICJHYXJhbW9uZCIsDQogICAgIk1vbmFjbyIsDQogIF0NCg0KICBjb25zdCByYW5kb21Db2xvciA9ICgpID0+DQogICAgIiMiICsNCiAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNjc3NzIxNSkNCiAgICAgIC50b1N0cmluZygxNikNCiAgICAgIC5wYWRTdGFydCg2LCAiMCIpDQogIGNvbnN0IHJhbmRvbUZvbnQgPSAoKSA9PiBmb250c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBmb250cy5sZW5ndGgpXQ0KICBjb25zdCByYW5kb21PZmZzZXQgPSAoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2MSkgLSAzMA0KICBjb25zdCByYW5kb21BbmdsZSA9ICgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDM2MCkNCg0KICBjb25zdCByYW5kb21HcmFkaWVudCA9ICgpID0+IHsNCiAgICBjb25zdCBjb2xvcjEgPSByYW5kb21Db2xvcigpDQogICAgY29uc3QgY29sb3IyID0gcmFuZG9tQ29sb3IoKQ0KICAgIGNvbnN0IGFuZ2xlID0gcmFuZG9tQW5nbGUoKQ0KICAgIHJldHVybiBgbGluZWFyLWdyYWRpZW50KCR7YW5nbGV9ZGVnLCAke2NvbG9yMX0sICR7Y29sb3IyfSlgDQogIH0NCg0KICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIqIikuZm9yRWFjaCgoZWwpID0+IHsNCiAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSByYW5kb21HcmFkaWVudCgpDQogICAgZWwuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAiY292ZXIiDQogICAgZWwuc3R5bGUuY29sb3IgPSByYW5kb21Db2xvcigpDQogICAgZWwuc3R5bGUuZm9udEZhbWlseSA9IHJhbmRvbUZvbnQoKQ0KDQogICAgY29uc3QgYmFzZUZvbnRTaXplID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmZvbnRTaXplDQogICAgaWYgKGJhc2VGb250U2l6ZSkgew0KICAgICAgY29uc3QgbnVtZXJpY1NpemUgPSBOdW1iZXIucGFyc2VGbG9hdChiYXNlRm9udFNpemUpDQogICAgICBjb25zdCBuZXdTaXplID0gTWF0aC5tYXgoNiwgbnVtZXJpY1NpemUgKyByYW5kb21PZmZzZXQoKSkgLy8gbWluaW11bSA2cHgNCiAgICAgIGVsLnN0eWxlLmZvbnRTaXplID0gbmV3U2l6ZSArICJweCINCiAgICB9DQoNCiAgICBpZiAoZWwudGFnTmFtZSA9PT0gIklNRyIpIHsNCiAgICAgIGVsLnN0eWxlLmZpbHRlciA9IGBodWUtcm90YXRlKCR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYwKX1kZWcpYA0KDQogICAgICBjb25zdCBiYXNlV2lkdGggPSBlbC5vZmZzZXRXaWR0aA0KICAgICAgY29uc3QgYmFzZUhlaWdodCA9IGVsLm9mZnNldEhlaWdodA0KICAgICAgY29uc3Qgd2lkdGhPZmZzZXQgPSByYW5kb21PZmZzZXQoKQ0KICAgICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gcmFuZG9tT2Zmc2V0KCkNCg0KICAgICAgZWwuc3R5bGUud2lkdGggPSBNYXRoLm1heCgxMCwgYmFzZVdpZHRoICsgd2lkdGhPZmZzZXQpICsgInB4Ig0KICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gTWF0aC5tYXgoMTAsIGJhc2VIZWlnaHQgKyBoZWlnaHRPZmZzZXQpICsgInB4Ig0KICAgIH0NCiAgfSkNCg0KICAvLyBBZGQgYSBsb2cgZW50cnkgZm9yIGZ1bg0KICBhZGRMb2coIldURiBtb2RlIGFjdGl2YXRlZCEg8J+kqiIpDQp9DQoNCi8vIFVwZGF0ZSB0aGUgaW5pdFRoZW1lIGZ1bmN0aW9uIHRvIGRlZmF1bHQgdG8gZGFyayBtb2RlDQpmdW5jdGlvbiBpbml0VGhlbWUoKSB7DQogIGNvbnN0IHNhdmVkVGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidGhlbWUiKQ0KICBpZiAoc2F2ZWRUaGVtZSA9PT0gImxpZ2h0Iikgew0KICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgiZGFyay10aGVtZSIpDQogIH0gZWxzZSB7DQogICAgLy8gRGVmYXVsdCB0byBkYXJrIHRoZW1lDQogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCJkYXJrLXRoZW1lIikNCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgidGhlbWUiLCAiZGFyayIpDQogIH0NCn0NCg0KLy8gSW5pdGlhbGl6ZSBXZWJTb2NrZXQgY29ubmVjdGlvbg0KZnVuY3Rpb24gaW5pdFdlYlNvY2tldCgpIHsNCiAgY29uc3QgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICJodHRwczoiID8gIndzczoiIDogIndzOiINCiAgY29uc3Qgd3NVcmwgPSBgJHtwcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3R9YA0KDQogIHNvY2tldCA9IG5ldyBXZWJTb2NrZXQod3NVcmwpDQoNCiAgc29ja2V0Lm9ub3BlbiA9ICgpID0+IHsNCiAgICBhZGRMb2coIkNvbm5lY3RlZCB0byBzZXJ2ZXIiKQ0KICB9DQoNCiAgc29ja2V0Lm9uY2xvc2UgPSAoKSA9PiB7DQogICAgYWRkTG9nKCJEaXNjb25uZWN0ZWQgZnJvbSBzZXJ2ZXIiKQ0KICAgIC8vIFRyeSB0byByZWNvbm5lY3QgYWZ0ZXIgMyBzZWNvbmRzDQogICAgc2V0VGltZW91dChpbml0V2ViU29ja2V0LCAzMDAwKQ0KICB9DQoNCiAgc29ja2V0Lm9uZXJyb3IgPSAoZXJyb3IpID0+IHsNCiAgICBhZGRMb2coIldlYlNvY2tldCBlcnJvcjogIiArIGVycm9yLm1lc3NhZ2UpDQogIH0NCg0KICBzb2NrZXQub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7DQogICAgaGFuZGxlV2ViU29ja2V0TWVzc2FnZShldmVudC5kYXRhKQ0KICB9DQp9DQoNCi8vIEluaXRpYWxpemUgZXZlbnQgbGlzdGVuZXJzDQpmdW5jdGlvbiBpbml0RXZlbnRMaXN0ZW5lcnMoKSB7DQogIC8vIFVwZGF0ZSB0aGUgaW5zdGFsbCBidXR0b24gZXZlbnQgbGlzdGVuZXIgdG8gdXNlIHRoZSBzZWxlY3RlZCB2ZXJzaW9uDQogIGluc3RhbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7DQogICAgaWYgKCFzZWxlY3RlZFJlbGVhc2UgfHwgIXNlbGVjdGVkVmVyc2lvbikgew0KICAgICAgYWRkTG9nKCJQbGVhc2Ugc2VsZWN0IGEgcmVsZWFzZSBjaGFubmVsIGFuZCB2ZXJzaW9uIikNCiAgICAgIHJldHVybg0KICAgIH0NCg0KICAgIGNvbnN0IG92ZXJ3cml0ZVBhdGggPSBjdXN0b21QYXRoLnZhbHVlLnRyaW0oKQ0KDQogICAgY29uc3Qgb3B0aW9ucyA9IHsNCiAgICAgIGFjdGlvbjogImluc3RhbGwiLA0KICAgICAgZG93bmxvYWRVcmw6IHNlbGVjdGVkVmVyc2lvbi5kb3dubG9hZCwNCiAgICAgIC4uLihvdmVyd3JpdGVQYXRoICYmIHsgb3ZlcndyaXRlUGF0aCB9KSwNCiAgICB9DQoNCiAgICBzdGFydEluc3RhbGxhdGlvbihvcHRpb25zKQ0KICB9KQ0KDQogIC8vIFVuaW5zdGFsbCBidXR0b24NCiAgdW5pbnN0YWxsQnRuLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4gew0KICAgIGNvbnN0IG9wdGlvbnMgPSB7DQogICAgICBhY3Rpb246ICJ1bmluc3RhbGwiLA0KICAgIH0NCg0KICAgIHN0YXJ0VW5pbnN0YWxsYXRpb24ob3B0aW9ucykNCiAgfSkNCg0KICAvLyBCYWNrIGJ1dHRvbg0KICBiYWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4gew0KICAgIGlmICghaXNJbnN0YWxsaW5nKSB7DQogICAgICBzaG93U2V0dXBTY3JlZW4oKQ0KICAgIH0gZWxzZSB7DQogICAgICBhZGRMb2coIkNhbm5vdCBnbyBiYWNrIGR1cmluZyBpbnN0YWxsYXRpb24iKQ0KICAgIH0NCiAgfSkNCg0KICAvLyBUaGVtZSB0b2dnbGUNCiAgdGhlbWVUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7DQogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCJkYXJrLXRoZW1lIikNCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgidGhlbWUiLCBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygiZGFyay10aGVtZSIpID8gImRhcmsiIDogImxpZ2h0IikNCiAgfSkNCg0KICAvLyBBY2NvcmRpb24NCiAgYWNjb3JkaW9uSGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4gew0KICAgIGFjY29yZGlvbi5jbGFzc0xpc3QudG9nZ2xlKCJhY3RpdmUiKQ0KICB9KQ0KfQ0KDQovLyBDaGVjayBpZiBUaWRhTHVuYSBpcyBpbnN0YWxsZWQNCmZ1bmN0aW9uIGNoZWNrSWZJbnN0YWxsZWQoKSB7DQogIGZldGNoKCIvaXNJbnN0YWxsZWQiKQ0KICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKQ0KICAgIC50aGVuKChkYXRhKSA9PiB7DQogICAgICBpc0luc3RhbGxlZCA9IGRhdGEuaXNJbnN0YWxsZWQNCiAgICAgIHVwZGF0ZUJ1dHRvblN0YXRlcygpDQogICAgfSkNCiAgICAuY2F0Y2goKGVycm9yKSA9PiB7DQogICAgICBhZGRMb2coIkVycm9yIGNoZWNraW5nIGluc3RhbGxhdGlvbiBzdGF0dXM6ICIgKyBlcnJvci5tZXNzYWdlKQ0KICAgIH0pDQp9DQoNCi8vIFVwZGF0ZSBidXR0b24gc3RhdGVzIGJhc2VkIG9uIGluc3RhbGxhdGlvbiBzdGF0dXMNCmZ1bmN0aW9uIHVwZGF0ZUJ1dHRvblN0YXRlcygpIHsNCiAgaWYgKGlzSW5zdGFsbGVkKSB7DQogICAgaW5zdGFsbEJ0bi50ZXh0Q29udGVudCA9ICJSZWluc3RhbGwiDQogICAgdW5pbnN0YWxsQnRuLmRpc2FibGVkID0gZmFsc2UNCiAgfSBlbHNlIHsNCiAgICBpbnN0YWxsQnRuLnRleHRDb250ZW50ID0gIkluc3RhbGwiDQogICAgdW5pbnN0YWxsQnRuLmRpc2FibGVkID0gdHJ1ZQ0KICB9DQoNCiAgLy8gVXBkYXRlIGJhY2sgYnV0dG9uIHN0YXRlIGJhc2VkIG9uIGluc3RhbGxhdGlvbiBwcm9ncmVzcw0KICBiYWNrQnRuLmRpc2FibGVkID0gaXNJbnN0YWxsaW5nDQp9DQoNCi8vIENoZWNrIGN1cnJlbnQgc3RhdGUgZnJvbSB0aGUgc2VydmVyDQpmdW5jdGlvbiBjaGVja0N1cnJlbnRTdGF0ZSgpIHsNCiAgZmV0Y2goIi9zdGF0ZSIpDQogICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpDQogICAgLnRoZW4oKGRhdGEpID0+IHsNCiAgICAgIGlmIChkYXRhLmlzUnVubmluZykgew0KICAgICAgICBpc0luc3RhbGxpbmcgPSB0cnVlDQogICAgICAgIHNob3dQcm9ncmVzc1NjcmVlbigpDQoNCiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHN0ZXBzIGluIHByb2dyZXNzLCByZW5kZXIgdGhlbQ0KICAgICAgICBpZiAoZGF0YS5zdGVwcyAmJiBkYXRhLnN0ZXBzLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAvLyBDbGVhciBzdGVwcyBjb250YWluZXINCiAgICAgICAgICBzdGVwc0NvbnRhaW5lci5pbm5lckhUTUwgPSAiIg0KDQogICAgICAgICAgLy8gQWRkIGVhY2ggc3RlcCB0aGF0IGhhcyBiZWVuIHN0YXJ0ZWQNCiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBkYXRhLmN1cnJlbnRTdGVwSW5kZXg7IGkrKykgew0KICAgICAgICAgICAgaWYgKGkgPCBkYXRhLnN0ZXBzLmxlbmd0aCkgew0KICAgICAgICAgICAgICBhZGRTdGVwKGRhdGEuc3RlcHNbaV0sIGkgPT09IGRhdGEuY3VycmVudFN0ZXBJbmRleCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9KQ0KICAgIC5jYXRjaCgoZXJyb3IpID0+IHsNCiAgICAgIGFkZExvZygiRXJyb3IgZmV0Y2hpbmcgc3RhdGU6ICIgKyBlcnJvci5tZXNzYWdlKQ0KICAgIH0pDQp9DQoNCi8vIEZldGNoIGF2YWlsYWJsZSByZWxlYXNlcw0KZnVuY3Rpb24gZmV0Y2hSZWxlYXNlcygpIHsNCiAgZmV0Y2goIi9yZWxlYXNlcyIpDQogICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpDQogICAgLnRoZW4oKGRhdGEpID0+IHsNCiAgICAgIHJlbGVhc2VzID0gZGF0YQ0KICAgICAgcmVuZGVyUmVsZWFzZUNhcmRzKHJlbGVhc2VzKQ0KICAgIH0pDQogICAgLmNhdGNoKChlcnJvcikgPT4gew0KICAgICAgYWRkTG9nKCJFcnJvciBmZXRjaGluZyByZWxlYXNlczogIiArIGVycm9yLm1lc3NhZ2UpDQogICAgfSkNCn0NCg0KLy8gVXBkYXRlIHRoZSByZW5kZXJSZWxlYXNlQ2FyZHMgZnVuY3Rpb24gdG8gYWRkIGEgc2VsZWN0IGJ1dHRvbg0KZnVuY3Rpb24gcmVuZGVyUmVsZWFzZUNhcmRzKHJlbGVhc2VzKSB7DQogIGlmICghcmVsZWFzZXMgfHwgIXJlbGVhc2VzLmxlbmd0aCkgew0KICAgIGFkZExvZygiTm8gcmVsZWFzZSBjaGFubmVscyBhdmFpbGFibGUiKQ0KICAgIHJlbGVhc2VDYXJkc0NvbnRhaW5lci5pbm5lckhUTUwgPQ0KICAgICAgJzxkaXYgY2xhc3M9InJlbGVhc2UtY2FyZCI+PGRpdiBjbGFzcz0icmVsZWFzZS1jYXJkLWhlYWRlciI+PGgzPk5vIHJlbGVhc2VzIGZvdW5kPC9oMz48L2Rpdj48L2Rpdj4nDQogICAgcmV0dXJuDQogIH0NCg0KICAvLyBDbGVhciBleGlzdGluZyBjYXJkcw0KICByZWxlYXNlQ2FyZHNDb250YWluZXIuaW5uZXJIVE1MID0gIiINCg0KICAvLyBBZGQgY2FyZHMgZm9yIGVhY2ggcmVsZWFzZSBjaGFubmVsDQogIHJlbGVhc2VzLmZvckVhY2goKHJlbGVhc2UpID0+IHsNCiAgICAvLyBDcmVhdGUgYSB3cmFwcGVyIGZvciB0aGUgY2FyZA0KICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKQ0KICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gInJlbGVhc2UtY2FyZC13cmFwcGVyIg0KDQogICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpDQogICAgY2FyZC5jbGFzc05hbWUgPSAicmVsZWFzZS1jYXJkIg0KICAgIGNhcmQuZGF0YXNldC5pZCA9IHJlbGVhc2UuaWQNCg0KICAgIGNvbnN0IGNhcmRIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKQ0KICAgIGNhcmRIZWFkZXIuY2xhc3NOYW1lID0gInJlbGVhc2UtY2FyZC1oZWFkZXIiDQoNCiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImgzIikNCiAgICB0aXRsZS50ZXh0Q29udGVudCA9IHJlbGVhc2UubmFtZQ0KDQogICAgY2FyZEhlYWRlci5hcHBlbmRDaGlsZCh0aXRsZSkNCg0KICAgIGNvbnN0IGNhcmRCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikNCiAgICBjYXJkQm9keS5jbGFzc05hbWUgPSAicmVsZWFzZS1jYXJkLWJvZHkiDQoNCiAgICAvLyBDcmVhdGUgdmVyc2lvbiBkcm9wZG93biB3aXRoIGEgY3VzdG9tIHNlbGVjdCBjb250YWluZXINCiAgICBjb25zdCBzZWxlY3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKQ0KICAgIHNlbGVjdENvbnRhaW5lci5jbGFzc05hbWUgPSAiY3VzdG9tLXNlbGVjdC1jb250YWluZXIiDQoNCiAgICBjb25zdCB2ZXJzaW9uU2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2VsZWN0IikNCiAgICB2ZXJzaW9uU2VsZWN0LmNsYXNzTmFtZSA9ICJ2ZXJzaW9uLXNlbGVjdCINCiAgICB2ZXJzaW9uU2VsZWN0LmlkID0gYHZlcnNpb24tc2VsZWN0LSR7cmVsZWFzZS5pZH1gDQoNCiAgICAvLyBBZGQgb3B0aW9ucyBmb3IgZWFjaCB2ZXJzaW9uDQogICAgaWYgKHJlbGVhc2UudmVyc2lvbnMgJiYgcmVsZWFzZS52ZXJzaW9ucy5sZW5ndGggPiAwKSB7DQogICAgICByZWxlYXNlLnZlcnNpb25zLmZvckVhY2goKHZlcnNpb24sIGluZGV4KSA9PiB7DQogICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpDQogICAgICAgIG9wdGlvbi52YWx1ZSA9IGluZGV4DQogICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHZlcnNpb24udmVyc2lvbg0KICAgICAgICB2ZXJzaW9uU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbikNCiAgICAgIH0pDQogICAgfSBlbHNlIHsNCiAgICAgIC8vIEZhbGxiYWNrIGlmIG5vIHZlcnNpb25zDQogICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKQ0KICAgICAgb3B0aW9uLnZhbHVlID0gIi0xIg0KICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gIk5vIHZlcnNpb25zIGF2YWlsYWJsZSINCiAgICAgIG9wdGlvbi5kaXNhYmxlZCA9IHRydWUNCiAgICAgIHZlcnNpb25TZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKQ0KICAgICAgdmVyc2lvblNlbGVjdC5kaXNhYmxlZCA9IHRydWUNCiAgICB9DQoNCiAgICAvLyBBZGQgZHJvcGRvd24gYXJyb3cNCiAgICBjb25zdCBkcm9wZG93bkFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikNCiAgICBkcm9wZG93bkFycm93LmNsYXNzTmFtZSA9ICJkcm9wZG93bi1hcnJvdyINCiAgICBkcm9wZG93bkFycm93LmlubmVySFRNTCA9ICLilrwiDQoNCiAgICBzZWxlY3RDb250YWluZXIuYXBwZW5kQ2hpbGQodmVyc2lvblNlbGVjdCkNCiAgICBzZWxlY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd25BcnJvdykNCg0KICAgIC8vIFByZXZlbnQgZHJvcGRvd24gY2xpY2sgZnJvbSBzZWxlY3RpbmcgdGhlIGNhcmQNCiAgICBzZWxlY3RDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoZSkgPT4gew0KICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKQ0KICAgIH0pDQoNCiAgICAvLyBIYW5kbGUgdmVyc2lvbiBjaGFuZ2UNCiAgICB2ZXJzaW9uU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIChlKSA9PiB7DQogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpDQogICAgICBjb25zdCB2ZXJzaW9uSW5kZXggPSBOdW1iZXIucGFyc2VJbnQoZS50YXJnZXQudmFsdWUpDQogICAgICBpZiAoc2VsZWN0ZWRSZWxlYXNlICYmIHNlbGVjdGVkUmVsZWFzZS5pZCA9PT0gcmVsZWFzZS5pZCkgew0KICAgICAgICBzZWxlY3RWZXJzaW9uKHZlcnNpb25JbmRleCkNCiAgICAgIH0NCiAgICB9KQ0KDQogICAgY2FyZEJvZHkuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGFpbmVyKQ0KDQogICAgLy8gQWRkIHNlbGVjdCBidXR0b24NCiAgICBjb25zdCBzZWxlY3RCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKQ0KICAgIHNlbGVjdEJ1dHRvbi5jbGFzc05hbWUgPSAic2VsZWN0LWJ1dHRvbiINCiAgICBzZWxlY3RCdXR0b24udGV4dENvbnRlbnQgPSAiU2VsZWN0IFJlbGVhc2UgQ2hhbm5lbCINCiAgICBzZWxlY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoZSkgPT4gew0KICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKQ0KICAgICAgc2VsZWN0UmVsZWFzZShyZWxlYXNlKQ0KICAgIH0pDQogICAgY2FyZEJvZHkuYXBwZW5kQ2hpbGQoc2VsZWN0QnV0dG9uKQ0KDQogICAgY2FyZC5hcHBlbmRDaGlsZChjYXJkSGVhZGVyKQ0KICAgIGNhcmQuYXBwZW5kQ2hpbGQoY2FyZEJvZHkpDQoNCiAgICAvLyBBZGQgY2xpY2sgZXZlbnQgdG8gc2VsZWN0IHRoaXMgcmVsZWFzZQ0KICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7DQogICAgICBzZWxlY3RSZWxlYXNlKHJlbGVhc2UpDQogICAgfSkNCg0KICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoY2FyZCkNCiAgICByZWxlYXNlQ2FyZHNDb250YWluZXIuYXBwZW5kQ2hpbGQod3JhcHBlcikNCiAgfSkNCg0KICAvLyBTZWxlY3QgdGhlIGZpcnN0IHJlbGVhc2UgYnkgZGVmYXVsdA0KICBpZiAocmVsZWFzZXMubGVuZ3RoID4gMCkgew0KICAgIHNlbGVjdFJlbGVhc2UocmVsZWFzZXNbMF0pDQogIH0NCn0NCg0KLy8gQWRkIGEgbmV3IGZ1bmN0aW9uIHRvIHNlbGVjdCBhIHZlcnNpb24NCmZ1bmN0aW9uIHNlbGVjdFZlcnNpb24odmVyc2lvbkluZGV4KSB7DQogIGlmICghc2VsZWN0ZWRSZWxlYXNlIHx8ICFzZWxlY3RlZFJlbGVhc2UudmVyc2lvbnMgfHwgdmVyc2lvbkluZGV4ID49IHNlbGVjdGVkUmVsZWFzZS52ZXJzaW9ucy5sZW5ndGgpIHsNCiAgICByZXR1cm4NCiAgfQ0KDQogIHNlbGVjdGVkVmVyc2lvbiA9IHNlbGVjdGVkUmVsZWFzZS52ZXJzaW9uc1t2ZXJzaW9uSW5kZXhdDQogIGFkZExvZyhgU2VsZWN0ZWQgdmVyc2lvbjogJHtzZWxlY3RlZFZlcnNpb24udmVyc2lvbn1gKQ0KfQ0KDQovLyBVcGRhdGUgdGhlIHNlbGVjdFJlbGVhc2UgZnVuY3Rpb24gdG8gaGFuZGxlIHRoZSBuZXcgZm9ybWF0DQpmdW5jdGlvbiBzZWxlY3RSZWxlYXNlKHJlbGVhc2UpIHsNCiAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBHaXRIdWIgY29udGFpbmVycw0KICBjb25zdCBleGlzdGluZ0dpdGh1YkNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuZ2l0aHViLWNvbnRhaW5lciIpDQogIGV4aXN0aW5nR2l0aHViQ29udGFpbmVycy5mb3JFYWNoKChjb250YWluZXIpID0+IGNvbnRhaW5lci5yZW1vdmUoKSkNCg0KICBzZWxlY3RlZFJlbGVhc2UgPSByZWxlYXNlDQoNCiAgLy8gVXBkYXRlIFVJIHRvIHNob3cgc2VsZWN0ZWQgY2FyZA0KICBjb25zdCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5yZWxlYXNlLWNhcmQiKQ0KICBjYXJkcy5mb3JFYWNoKChjYXJkKSA9PiB7DQogICAgaWYgKGNhcmQuZGF0YXNldC5pZCA9PT0gcmVsZWFzZS5pZCkgew0KICAgICAgY2FyZC5jbGFzc0xpc3QuYWRkKCJzZWxlY3RlZCIpDQoNCiAgICAgIC8vIFNlbGVjdCB0aGUgZmlyc3QgdmVyc2lvbiBieSBkZWZhdWx0DQogICAgICBpZiAocmVsZWFzZS52ZXJzaW9ucyAmJiByZWxlYXNlLnZlcnNpb25zLmxlbmd0aCA+IDApIHsNCiAgICAgICAgY29uc3QgdmVyc2lvblNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB2ZXJzaW9uLXNlbGVjdC0ke3JlbGVhc2UuaWR9YCkNCiAgICAgICAgaWYgKHZlcnNpb25TZWxlY3QpIHsNCiAgICAgICAgICB2ZXJzaW9uU2VsZWN0LnNlbGVjdGVkSW5kZXggPSAwDQogICAgICAgICAgc2VsZWN0VmVyc2lvbigwKQ0KICAgICAgICB9DQogICAgICB9DQoNCiAgICAgIC8vIEFkZCBHaXRIdWIgYnV0dG9uIGNvbnRhaW5lciBiZWxvdyB0aGUgc2VsZWN0ZWQgY2FyZA0KICAgICAgY29uc3QgZ2l0aHViQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikNCiAgICAgIGdpdGh1YkNvbnRhaW5lci5jbGFzc05hbWUgPSAiZ2l0aHViLWNvbnRhaW5lciINCg0KICAgICAgY29uc3QgZ2l0aHViTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKQ0KICAgICAgZ2l0aHViTGluay5ocmVmID0gcmVsZWFzZS5naXRodWJVcmwNCiAgICAgIGdpdGh1YkxpbmsuY2xhc3NOYW1lID0gImdpdGh1Yi1saW5rIg0KICAgICAgZ2l0aHViTGluay50YXJnZXQgPSAiX2JsYW5rIg0KICAgICAgZ2l0aHViTGluay5pbm5lckhUTUwgPSBgDQogICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSIgc3Ryb2tlPSJjdXJyZW50Q29sb3IiIHN0cm9rZS13aWR0aD0iMiIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiBjbGFzcz0iZ2l0aHViLWljb24iPg0KICAgICAgICAgIDxwYXRoIGQ9Ik05IDE5Yy01IDEuNS01LTIuNS03LTNtMTQgNnYtMy44N2EzLjM3IDMuMzcgMCAwIDAtLjk0LTIuNjFjMy4xNC0uMzUgNi40NC0xLjU0IDYuNDQtN0E1LjQ0IDUuNDQgMCAwIDAgMjAgNC43NyA1LjA3IDUuMDcgMCAwIDAgMTkuOTEgMVMxOC43My42NSAxNiAyLjQ4YTEzLjM4IDEzLjM4IDAgMCAwLTcgMEM2LjI3LjY1IDUuMDkgMSA1LjA5IDFBNS4wNyA1LjA3IDAgMCAwIDUgNC43N2E1LjQ0IDUuNDQgMCAwIDAtMS41IDMuNzhjMCA1LjQyIDMuMyA2LjYxIDYuNDQgN0EzLjM3IDMuMzcgMCAwIDAgOSAxOC4xM1YyMiI+PC9wYXRoPg0KICAgICAgICA8L3N2Zz4NCiAgICAgICAgVmlldyBvbiBHaXRIdWINCiAgICAgIGANCg0KICAgICAgZ2l0aHViQ29udGFpbmVyLmFwcGVuZENoaWxkKGdpdGh1YkxpbmspDQoNCiAgICAgIC8vIEluc2VydCB0aGUgR2l0SHViIGNvbnRhaW5lciBhZnRlciB0aGUgY2FyZCBpbiB0aGUgRE9NDQogICAgICBjYXJkLmFmdGVyKGdpdGh1YkNvbnRhaW5lcikNCg0KICAgICAgLy8gRW5zdXJlIHRoZSBHaXRIdWIgY29udGFpbmVyIGlzIHByb3Blcmx5IHBvc2l0aW9uZWQNCiAgICAgIC8vIGJ5IGFkZGluZyBhIHdyYXBwZXIgaWYgbmVlZGVkDQogICAgICBjb25zdCBjYXJkUGFyZW50ID0gY2FyZC5wYXJlbnRFbGVtZW50DQogICAgICBpZiAoY2FyZFBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoInJlbGVhc2UtY2FyZHMtY29udGFpbmVyIikpIHsNCiAgICAgICAgLy8gQ3JlYXRlIGEgd3JhcHBlciBmb3IgdGhlIGNhcmQgYW5kIEdpdEh1YiBjb250YWluZXINCiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpDQogICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gInJlbGVhc2UtY2FyZC13cmFwcGVyIg0KDQogICAgICAgIC8vIFJlcGxhY2UgdGhlIGNhcmQgd2l0aCB0aGUgd3JhcHBlcg0KICAgICAgICBjYXJkUGFyZW50LnJlcGxhY2VDaGlsZCh3cmFwcGVyLCBjYXJkKQ0KDQogICAgICAgIC8vIEFkZCB0aGUgY2FyZCBhbmQgR2l0SHViIGNvbnRhaW5lciB0byB0aGUgd3JhcHBlcg0KICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGNhcmQpDQogICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZ2l0aHViQ29udGFpbmVyKQ0KICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICBjYXJkLmNsYXNzTGlzdC5yZW1vdmUoInNlbGVjdGVkIikNCiAgICB9DQogIH0pDQoNCiAgYWRkTG9nKGBTZWxlY3RlZCByZWxlYXNlOiAke3JlbGVhc2UubmFtZX1gKQ0KfQ0KDQovLyBBZGQgYSBzdGVwIHRvIHRoZSBVSQ0KZnVuY3Rpb24gYWRkU3RlcChzdGVwLCBpc0N1cnJlbnQgPSBmYWxzZSkgew0KICAvLyBDaGVjayBpZiBzdGVwIGFscmVhZHkgZXhpc3RzDQogIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3RlcC0ke3N0ZXB9YCkpIHsNCiAgICByZXR1cm4NCiAgfQ0KDQogIGNvbnN0IHN0ZXBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikNCiAgc3RlcEVsZW1lbnQuY2xhc3NOYW1lID0gInN0ZXAiDQogIHN0ZXBFbGVtZW50LmlkID0gYHN0ZXAtJHtzdGVwfWANCg0KICBpZiAoaXNDdXJyZW50KSB7DQogICAgc3RlcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiY3VycmVudCIpDQogIH0gZWxzZSB7DQogICAgc3RlcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgic3VjY2VzcyIpDQogIH0NCg0KICBjb25zdCBzdGVwVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKQ0KICBzdGVwVGl0bGUuY2xhc3NOYW1lID0gInN0ZXAtdGl0bGUiDQogIHN0ZXBUaXRsZS50ZXh0Q29udGVudCA9IFN0ZXBOYW1lc1tzdGVwXSB8fCBzdGVwDQoNCiAgY29uc3Qgc3RlcExvZ3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKQ0KICBzdGVwTG9ncy5jbGFzc05hbWUgPSAic3RlcC1sb2dzIg0KICBzdGVwTG9ncy5pZCA9IGBzdGVwLWxvZ3MtJHtzdGVwfWANCg0KICBzdGVwRWxlbWVudC5hcHBlbmRDaGlsZChzdGVwVGl0bGUpDQogIHN0ZXBFbGVtZW50LmFwcGVuZENoaWxkKHN0ZXBMb2dzKQ0KDQogIHN0ZXBzQ29udGFpbmVyLmFwcGVuZENoaWxkKHN0ZXBFbGVtZW50KQ0KDQogIC8vIFNjcm9sbCB0byB0aGUgbmV3IHN0ZXANCiAgc3RlcEVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogInNtb290aCIsIGJsb2NrOiAiY2VudGVyIiB9KQ0KDQogIC8vIEFkZCB0byBjdXJyZW50IHN0ZXBzIGFycmF5DQogIGlmICghY3VycmVudFN0ZXBzLmluY2x1ZGVzKHN0ZXApKSB7DQogICAgY3VycmVudFN0ZXBzLnB1c2goc3RlcCkNCiAgfQ0KfQ0KDQovLyBVcGRhdGUgdGhlIHN0YXJ0SW5zdGFsbGF0aW9uIGZ1bmN0aW9uIHRvIHVzZSB0aGUgc2VsZWN0ZWQgdmVyc2lvbg0KZnVuY3Rpb24gc3RhcnRJbnN0YWxsYXRpb24ob3B0aW9ucykgew0KICAvLyBSZXNldCBzdGVwcw0KICBjdXJyZW50U3RlcHMgPSBbXQ0KICBzdGVwc0NvbnRhaW5lci5pbm5lckhUTUwgPSAiIg0KDQogIC8vIENvbnZlcnQgb3B0aW9ucyB0byBxdWVyeSBwYXJhbWV0ZXJzDQogIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpDQogIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHsNCiAgICBxdWVyeVBhcmFtcy5hcHBlbmQoa2V5LCBvcHRpb25zW2tleV0pDQogIH0NCg0KICBmZXRjaChgL3NldE9wdGlvbnM/JHtxdWVyeVBhcmFtcy50b1N0cmluZygpfWApDQogICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7DQogICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7DQogICAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIHNldCBvcHRpb25zIikNCiAgICAgIH0NCiAgICAgIHJldHVybiBmZXRjaCgiL3N0YXJ0IikNCiAgICB9KQ0KICAgIC50aGVuKChyZXNwb25zZSkgPT4gew0KICAgICAgaWYgKCFyZXNwb25zZS5vaykgew0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBzdGFydCBpbnN0YWxsYXRpb24iKQ0KICAgICAgfQ0KICAgICAgaXNJbnN0YWxsaW5nID0gdHJ1ZQ0KICAgICAgc2hvd1Byb2dyZXNzU2NyZWVuKCkNCiAgICB9KQ0KICAgIC5jYXRjaCgoZXJyb3IpID0+IHsNCiAgICAgIGFkZExvZygiRXJyb3I6ICIgKyBlcnJvci5tZXNzYWdlKQ0KICAgIH0pDQp9DQoNCi8vIFN0YXJ0IHVuaW5zdGFsbGF0aW9uDQpmdW5jdGlvbiBzdGFydFVuaW5zdGFsbGF0aW9uKG9wdGlvbnMpIHsNCiAgLy8gUmVzZXQgc3RlcHMNCiAgY3VycmVudFN0ZXBzID0gW10NCiAgc3RlcHNDb250YWluZXIuaW5uZXJIVE1MID0gIiINCg0KICAvLyBDb252ZXJ0IG9wdGlvbnMgdG8gcXVlcnkgcGFyYW1ldGVycw0KICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKQ0KICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7DQogICAgcXVlcnlQYXJhbXMuYXBwZW5kKGtleSwgb3B0aW9uc1trZXldKQ0KICB9DQoNCiAgZmV0Y2goYC9zZXRPcHRpb25zPyR7cXVlcnlQYXJhbXMudG9TdHJpbmcoKX1gKQ0KICAgIC50aGVuKChyZXNwb25zZSkgPT4gew0KICAgICAgaWYgKCFyZXNwb25zZS5vaykgew0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBzZXQgb3B0aW9ucyIpDQogICAgICB9DQogICAgICByZXR1cm4gZmV0Y2goIi9zdGFydCIpDQogICAgfSkNCiAgICAudGhlbigocmVzcG9uc2UpID0+IHsNCiAgICAgIGlmICghcmVzcG9uc2Uub2spIHsNCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gc3RhcnQgdW5pbnN0YWxsYXRpb24iKQ0KICAgICAgfQ0KICAgICAgaXNJbnN0YWxsaW5nID0gdHJ1ZQ0KICAgICAgc2hvd1Byb2dyZXNzU2NyZWVuKCkNCiAgICB9KQ0KICAgIC5jYXRjaCgoZXJyb3IpID0+IHsNCiAgICAgIGFkZExvZygiRXJyb3I6ICIgKyBlcnJvci5tZXNzYWdlKQ0KICAgIH0pDQp9DQoNCi8vIEhhbmRsZSBXZWJTb2NrZXQgbWVzc2FnZXMNCmZ1bmN0aW9uIGhhbmRsZVdlYlNvY2tldE1lc3NhZ2UoZGF0YSkgew0KICB0cnkgew0KICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpDQoNCiAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkgew0KICAgICAgY2FzZSBXZWJzb2NrZXRNZXNzYWdlVHlwZXMuSU5TVEFMTF9MT0c6DQogICAgICAgIGhhbmRsZUluc3RhbGxMb2cobWVzc2FnZS5kYXRhKQ0KICAgICAgICBicmVhaw0KDQogICAgICBjYXNlIFdlYnNvY2tldE1lc3NhZ2VUeXBlcy5TVEVQX0xPRzoNCiAgICAgICAgaGFuZGxlU3RlcExvZyhtZXNzYWdlLmRhdGEpDQogICAgICAgIGJyZWFrDQoNCiAgICAgIGNhc2UgV2Vic29ja2V0TWVzc2FnZVR5cGVzLlNURVBfVVBEQVRFOg0KICAgICAgICBoYW5kbGVTdGVwVXBkYXRlKG1lc3NhZ2UuZGF0YSkNCiAgICAgICAgYnJlYWsNCg0KICAgICAgY2FzZSBXZWJzb2NrZXRNZXNzYWdlVHlwZXMuSU5TVEFMTEFUSU9OX0NPTVBMRVRFOg0KICAgICAgICAvLyBIYW5kbGUgbnVsbCBkYXRhIGNhc2UNCiAgICAgICAgaGFuZGxlSW5zdGFsbGF0aW9uQ29tcGxldGUoKQ0KICAgICAgICBicmVhaw0KDQogICAgICBjYXNlIFdlYnNvY2tldE1lc3NhZ2VUeXBlcy5JTlNUQUxMQVRJT05fU1RBUlQ6DQogICAgICAgIGhhbmRsZUluc3RhbGxhdGlvblN0YXJ0KG1lc3NhZ2UuZGF0YSkNCiAgICAgICAgYnJlYWsNCg0KICAgICAgY2FzZSBXZWJzb2NrZXRNZXNzYWdlVHlwZXMuSU5TVEFMTEFUSU9OX0VSUk9SOg0KICAgICAgICBoYW5kbGVJbnN0YWxsYXRpb25FcnJvcihtZXNzYWdlLmRhdGEpDQogICAgICAgIGJyZWFrDQoNCiAgICAgIGRlZmF1bHQ6DQogICAgICAgIGNvbnNvbGUubG9nKCJVbmtub3duIG1lc3NhZ2UgdHlwZToiLCBtZXNzYWdlLnR5cGUpDQogICAgfQ0KICB9IGNhdGNoIChlcnJvcikgew0KICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIHBhcnNpbmcgV2ViU29ja2V0IG1lc3NhZ2U6IiwgZXJyb3IpDQogIH0NCn0NCg0KLy8gSGFuZGxlIGluc3RhbGxhdGlvbiBsb2cgbWVzc2FnZQ0KZnVuY3Rpb24gaGFuZGxlSW5zdGFsbExvZyhkYXRhKSB7DQogIGlmIChkYXRhLmlzRXJyb3IpIHsNCiAgICBhZGRMb2coYEVycm9yOiAke2RhdGEubWVzc2FnZX0ke2RhdGEuZXJyb3IgPyBgIC0gJHtkYXRhLmVycm9yfWAgOiAiIn1gKQ0KICB9IGVsc2Ugew0KICAgIGFkZExvZyhkYXRhLm1lc3NhZ2UpDQogIH0NCn0NCg0KLy8gSGFuZGxlIHN0ZXAgbG9nIG1lc3NhZ2UNCmZ1bmN0aW9uIGhhbmRsZVN0ZXBMb2coZGF0YSkgew0KICBjb25zdCBzdGVwTG9ncyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzdGVwLWxvZ3MtJHtkYXRhLnN0ZXB9YCkNCg0KICBpZiAoc3RlcExvZ3MpIHsNCiAgICBjb25zdCBsb2dFbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpDQogICAgbG9nRW50cnkuY2xhc3NOYW1lID0gZGF0YS5pc0Vycm9yID8gInN0ZXAtbG9nIGVycm9yIiA6ICJzdGVwLWxvZyINCiAgICBsb2dFbnRyeS50ZXh0Q29udGVudCA9IGRhdGEuaXNFcnJvciA/IGBFcnJvcjogJHtkYXRhLm1lc3NhZ2V9JHtkYXRhLmVycm9yID8gYCAtICR7ZGF0YS5lcnJvcn1gIDogIiJ9YCA6IGRhdGEubWVzc2FnZQ0KDQogICAgc3RlcExvZ3MuYXBwZW5kQ2hpbGQobG9nRW50cnkpDQogICAgc3RlcExvZ3Muc2Nyb2xsVG9wID0gc3RlcExvZ3Muc2Nyb2xsSGVpZ2h0DQogIH0NCn0NCg0KLy8gSGFuZGxlIHN0ZXAgdXBkYXRlIG1lc3NhZ2UNCmZ1bmN0aW9uIGhhbmRsZVN0ZXBVcGRhdGUoc3RlcCkgew0KICAvLyBNYXJrIHByZXZpb3VzIHN0ZXBzIGFzIGNvbXBsZXRlZA0KICBjb25zdCBzdGVwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5zdGVwIikNCiAgc3RlcHMuZm9yRWFjaCgoc3RlcEVsZW1lbnQpID0+IHsNCiAgICBzdGVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJjdXJyZW50IikNCiAgICBzdGVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzdWNjZXNzIikNCiAgfSkNCg0KICAvLyBBZGQgdGhlIG5ldyBzdGVwIGFzIGN1cnJlbnQNCiAgYWRkU3RlcChzdGVwLCB0cnVlKQ0KfQ0KDQovLyBIYW5kbGUgaW5zdGFsbGF0aW9uIGNvbXBsZXRlIG1lc3NhZ2UNCmZ1bmN0aW9uIGhhbmRsZUluc3RhbGxhdGlvbkNvbXBsZXRlKCkgew0KICBhZGRMb2coIkluc3RhbGxhdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5ISIpDQoNCiAgLy8gRXhwbGljaXRseSBzZXQgaW5zdGFsbGluZyB0byBmYWxzZQ0KICBpc0luc3RhbGxpbmcgPSBmYWxzZQ0KDQogIC8vIEV4cGxpY2l0bHkgZW5hYmxlIHRoZSBiYWNrIGJ1dHRvbg0KICBiYWNrQnRuLmRpc2FibGVkID0gZmFsc2UNCiAgYmFja0J0bi5jbGFzc0xpc3QucmVtb3ZlKCJkaXNhYmxlZCIpDQoNCiAgLy8gTWFyayBhbGwgc3RlcHMgYXMgY29tcGxldGVkIGFuZCByZW1vdmUgdGhlIGN1cnJlbnQgY2xhc3MNCiAgY29uc3Qgc3RlcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuc3RlcCIpDQogIHN0ZXBzLmZvckVhY2goKHN0ZXApID0+IHsNCiAgICBzdGVwLmNsYXNzTGlzdC5yZW1vdmUoImN1cnJlbnQiKQ0KICAgIHN0ZXAuY2xhc3NMaXN0LmFkZCgic3VjY2VzcyIpDQogIH0pDQoNCiAgLy8gQWRkIGEgdmlzdWFsIGluZGljYXRvciB0aGF0IGluc3RhbGxhdGlvbiBpcyBjb21wbGV0ZQ0KICBjb25zdCBjb21wbGV0aW9uTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpDQogIGNvbXBsZXRpb25NZXNzYWdlLmNsYXNzTmFtZSA9ICJjb21wbGV0aW9uLW1lc3NhZ2UiDQogIGNvbXBsZXRpb25NZXNzYWdlLnRleHRDb250ZW50ID0gIuKchSBJbnN0YWxsYXRpb24gQ29tcGxldGUhIFlvdSBjYW4gbm93IGdvIGJhY2sgdG8gdGhlIHNldHVwIHNjcmVlbi4iDQogIHN0ZXBzQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbXBsZXRpb25NZXNzYWdlKQ0KDQogIC8vIFVwZGF0ZSBpbnN0YWxsYXRpb24gc3RhdHVzDQogIGNoZWNrSWZJbnN0YWxsZWQoKQ0KfQ0KDQovLyBIYW5kbGUgaW5zdGFsbGF0aW9uIHN0YXJ0IG1lc3NhZ2UNCmZ1bmN0aW9uIGhhbmRsZUluc3RhbGxhdGlvblN0YXJ0KGRhdGEpIHsNCiAgYWRkTG9nKGBTdGFydGluZyAke2RhdGEuYWN0aW9ufS4uLmApDQoNCiAgLy8gQ2xlYXIgc3RlcHMgY29udGFpbmVyDQogIHN0ZXBzQ29udGFpbmVyLmlubmVySFRNTCA9ICIiDQogIGN1cnJlbnRTdGVwcyA9IFtdDQoNCiAgLy8gQWRkIHRoZSBmaXJzdCBzdGVwIGlmIGl0IGV4aXN0cw0KICBpZiAoZGF0YS5zdGVwcyAmJiBkYXRhLnN0ZXBzLmxlbmd0aCA+IDApIHsNCiAgICBhZGRTdGVwKGRhdGEuc3RlcHNbMF0sIHRydWUpDQogIH0NCn0NCg0KLy8gSGFuZGxlIGluc3RhbGxhdGlvbiBlcnJvciBtZXNzYWdlDQpmdW5jdGlvbiBoYW5kbGVJbnN0YWxsYXRpb25FcnJvcihtZXNzYWdlKSB7DQogIGFkZExvZyhgSW5zdGFsbGF0aW9uIGZhaWxlZDogJHttZXNzYWdlfWApDQogIGlzSW5zdGFsbGluZyA9IGZhbHNlDQoNCiAgLy8gRW5hYmxlIGJhY2sgYnV0dG9uIG9uIGVycm9yIHRvbw0KICBiYWNrQnRuLmRpc2FibGVkID0gZmFsc2UNCiAgYmFja0J0bi5jbGFzc0xpc3QucmVtb3ZlKCJkaXNhYmxlZCIpDQoNCiAgLy8gTWFyayBjdXJyZW50IHN0ZXAgYXMgZmFpbGVkDQogIGNvbnN0IHN0ZXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLnN0ZXAuY3VycmVudCIpDQogIHN0ZXBzLmZvckVhY2goKHN0ZXApID0+IHsNCiAgICBzdGVwLmNsYXNzTGlzdC5yZW1vdmUoImN1cnJlbnQiKQ0KICAgIHN0ZXAuY2xhc3NMaXN0LmFkZCgiZXJyb3IiKQ0KICB9KQ0KfQ0KDQovLyBBZGQgbG9nIHRvIGdsb2JhbCBsb2cNCmZ1bmN0aW9uIGFkZExvZyhtZXNzYWdlKSB7DQogIGNvbnN0IGxvZ0VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikNCiAgbG9nRW50cnkuY2xhc3NOYW1lID0gImxvZy1lbnRyeSINCiAgbG9nRW50cnkudGV4dENvbnRlbnQgPSBgWyR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX1dICR7bWVzc2FnZX1gDQoNCiAgZ2xvYmFsTG9nLmFwcGVuZENoaWxkKGxvZ0VudHJ5KQ0KICBwcm9ncmVzc0dsb2JhbExvZy5hcHBlbmRDaGlsZChsb2dFbnRyeS5jbG9uZU5vZGUodHJ1ZSkpDQoNCiAgLy8gU2Nyb2xsIHRvIGJvdHRvbQ0KICBnbG9iYWxMb2cuc2Nyb2xsVG9wID0gZ2xvYmFsTG9nLnNjcm9sbEhlaWdodA0KICBwcm9ncmVzc0dsb2JhbExvZy5zY3JvbGxUb3AgPSBwcm9ncmVzc0dsb2JhbExvZy5zY3JvbGxIZWlnaHQNCn0NCg0KLy8gU2hvdyBzZXR1cCBzY3JlZW4NCmZ1bmN0aW9uIHNob3dTZXR1cFNjcmVlbigpIHsNCiAgc2V0dXBTY3JlZW4uY2xhc3NMaXN0LmFkZCgiYWN0aXZlIikNCiAgcHJvZ3Jlc3NTY3JlZW4uY2xhc3NMaXN0LnJlbW92ZSgiYWN0aXZlIikNCn0NCg0KLy8gU2hvdyBwcm9ncmVzcyBzY3JlZW4NCmZ1bmN0aW9uIHNob3dQcm9ncmVzc1NjcmVlbigpIHsNCiAgc2V0dXBTY3JlZW4uY2xhc3NMaXN0LnJlbW92ZSgiYWN0aXZlIikNCiAgcHJvZ3Jlc3NTY3JlZW4uY2xhc3NMaXN0LmFkZCgiYWN0aXZlIikNCg0KICAvLyBVcGRhdGUgYmFjayBidXR0b24gc3RhdGUgYmFzZWQgb24gaW5zdGFsbGF0aW9uIHN0YXR1cw0KICB1cGRhdGVCYWNrQnV0dG9uU3RhdGUoKQ0KfQ0KDQovLyBBZGQgYSBuZXcgZnVuY3Rpb24gdG8gc3BlY2lmaWNhbGx5IHVwZGF0ZSB0aGUgYmFjayBidXR0b24gc3RhdGUNCmZ1bmN0aW9uIHVwZGF0ZUJhY2tCdXR0b25TdGF0ZSgpIHsNCiAgLy8gRXhwbGljaXRseSBzZXQgdGhlIGRpc2FibGVkIGF0dHJpYnV0ZSBiYXNlZCBvbiBpc0luc3RhbGxpbmcNCiAgYmFja0J0bi5kaXNhYmxlZCA9IGlzSW5zdGFsbGluZw0KDQogIC8vIEFsc28gdXBkYXRlIHRoZSBjbGFzcyBmb3Igc3R5bGluZw0KICBpZiAoaXNJbnN0YWxsaW5nKSB7DQogICAgYmFja0J0bi5jbGFzc0xpc3QuYWRkKCJkaXNhYmxlZCIpDQogIH0gZWxzZSB7DQogICAgYmFja0J0bi5jbGFzc0xpc3QucmVtb3ZlKCJkaXNhYmxlZCIpDQogIH0NCn0NCg0KLy8gSW5pdGlhbGl6ZSBwYXJ0aWNsZXMgYmFja2dyb3VuZA0KZnVuY3Rpb24gaW5pdFBhcnRpY2xlcygpIHsNCiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBhcnRpY2xlcyIpDQogIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpDQogIGxldCBwYXJ0aWNsZXMgPSBbXQ0KDQogIC8vIFJlc2l6ZSBjYW52YXMgdG8gZmlsbCB3aW5kb3cNCiAgZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkgew0KICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoDQogICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodA0KICB9DQoNCiAgLy8gQ3JlYXRlIHBhcnRpY2xlcw0KICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWNsZXMoKSB7DQogICAgcGFydGljbGVzID0gW10NCiAgICBjb25zdCBwYXJ0aWNsZUNvdW50ID0gTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJXaWR0aCAvIDIwKQ0KDQogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWNsZUNvdW50OyBpKyspIHsNCiAgICAgIHBhcnRpY2xlcy5wdXNoKHsNCiAgICAgICAgeDogTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCwNCiAgICAgICAgeTogTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQsDQogICAgICAgIHJhZGl1czogTWF0aC5yYW5kb20oKSAqIDIgKyAxLA0KICAgICAgICBjb2xvcjogZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoImRhcmstdGhlbWUiKSA/ICIjZmZmZmZmIiA6ICIjNjM2NmYxIiwNCiAgICAgICAgc3BlZWQ6IE1hdGgucmFuZG9tKCkgKiAwLjUgKyAwLjEsDQogICAgICAgIGRpcmVjdGlvbjogTWF0aC5yYW5kb20oKSAqIE1hdGguUEkgKiAyLA0KICAgICAgICBvcGFjaXR5OiBNYXRoLnJhbmRvbSgpICogMC41ICsgMC4xLA0KICAgICAgfSkNCiAgICB9DQogIH0NCg0KICAvLyBEcmF3IHBhcnRpY2xlcw0KICBmdW5jdGlvbiBkcmF3UGFydGljbGVzKCkgew0KICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KQ0KDQogICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7DQogICAgICBjdHguYmVnaW5QYXRoKCkNCiAgICAgIGN0eC5hcmMocGFydGljbGUueCwgcGFydGljbGUueSwgcGFydGljbGUucmFkaXVzLCAwLCBNYXRoLlBJICogMikNCiAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXJ0aWNsZS5jb2xvcg0KICAgICAgY3R4Lmdsb2JhbEFscGhhID0gcGFydGljbGUub3BhY2l0eQ0KICAgICAgY3R4LmZpbGwoKQ0KDQogICAgICAvLyBNb3ZlIHBhcnRpY2xlDQogICAgICBwYXJ0aWNsZS54ICs9IE1hdGguY29zKHBhcnRpY2xlLmRpcmVjdGlvbikgKiBwYXJ0aWNsZS5zcGVlZA0KICAgICAgcGFydGljbGUueSArPSBNYXRoLnNpbihwYXJ0aWNsZS5kaXJlY3Rpb24pICogcGFydGljbGUuc3BlZWQNCg0KICAgICAgLy8gV3JhcCBhcm91bmQgZWRnZXMNCiAgICAgIGlmIChwYXJ0aWNsZS54IDwgMCkgcGFydGljbGUueCA9IGNhbnZhcy53aWR0aA0KICAgICAgaWYgKHBhcnRpY2xlLnggPiBjYW52YXMud2lkdGgpIHBhcnRpY2xlLnggPSAwDQogICAgICBpZiAocGFydGljbGUueSA8IDApIHBhcnRpY2xlLnkgPSBjYW52YXMuaGVpZ2h0DQogICAgICBpZiAocGFydGljbGUueSA+IGNhbnZhcy5oZWlnaHQpIHBhcnRpY2xlLnkgPSAwDQogICAgfSkNCg0KICAgIC8vIENvbm5lY3QgbmVhcmJ5IHBhcnRpY2xlcyB3aXRoIGxpbmVzDQogICAgY29ubmVjdFBhcnRpY2xlcygpDQoNCiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd1BhcnRpY2xlcykNCiAgfQ0KDQogIC8vIENvbm5lY3QgcGFydGljbGVzIHRoYXQgYXJlIGNsb3NlIHRvIGVhY2ggb3RoZXINCiAgZnVuY3Rpb24gY29ubmVjdFBhcnRpY2xlcygpIHsNCiAgICBjb25zdCBtYXhEaXN0YW5jZSA9IDEwMA0KDQogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWNsZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHBhcnRpY2xlcy5sZW5ndGg7IGorKykgew0KICAgICAgICBjb25zdCBkeCA9IHBhcnRpY2xlc1tpXS54IC0gcGFydGljbGVzW2pdLngNCiAgICAgICAgY29uc3QgZHkgPSBwYXJ0aWNsZXNbaV0ueSAtIHBhcnRpY2xlc1tqXS55DQogICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KQ0KDQogICAgICAgIGlmIChkaXN0YW5jZSA8IG1heERpc3RhbmNlKSB7DQogICAgICAgICAgY29uc3Qgb3BhY2l0eSA9IDEgLSBkaXN0YW5jZSAvIG1heERpc3RhbmNlDQogICAgICAgICAgY3R4LmJlZ2luUGF0aCgpDQogICAgICAgICAgY3R4Lm1vdmVUbyhwYXJ0aWNsZXNbaV0ueCwgcGFydGljbGVzW2ldLnkpDQogICAgICAgICAgY3R4LmxpbmVUbyhwYXJ0aWNsZXNbal0ueCwgcGFydGljbGVzW2pdLnkpDQogICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoImRhcmstdGhlbWUiKSA/ICIjZmZmZmZmIiA6ICIjNjM2NmYxIg0KICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHkgKiAwLjINCiAgICAgICAgICBjdHguc3Ryb2tlKCkNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIFVwZGF0ZSBwYXJ0aWNsZSBjb2xvcnMgd2hlbiB0aGVtZSBjaGFuZ2VzDQogIGZ1bmN0aW9uIHVwZGF0ZVBhcnRpY2xlQ29sb3JzKCkgew0KICAgIGNvbnN0IGNvbG9yID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoImRhcmstdGhlbWUiKSA/ICIjZmZmZmZmIiA6ICIjNjM2NmYxIg0KICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4gew0KICAgICAgcGFydGljbGUuY29sb3IgPSBjb2xvcg0KICAgIH0pDQogIH0NCg0KICAvLyBJbml0aWFsaXplDQogIHJlc2l6ZUNhbnZhcygpDQogIGNyZWF0ZVBhcnRpY2xlcygpDQogIGRyYXdQYXJ0aWNsZXMoKQ0KDQogIC8vIEV2ZW50IGxpc3RlbmVycw0KICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgKCkgPT4gew0KICAgIHJlc2l6ZUNhbnZhcygpDQogICAgY3JlYXRlUGFydGljbGVzKCkNCiAgfSkNCg0KICB0aGVtZVRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHVwZGF0ZVBhcnRpY2xlQ29sb3JzKQ0KfQ0K",
  "styles.css": ""
};
