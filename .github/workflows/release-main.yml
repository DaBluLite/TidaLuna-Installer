name: "[main] Build & Release"

on:
  push:
    branches:
      - "main"

permissions:
  contents: write

jobs:
  Build:
    name: Build for Windows and Linux
    strategy:
      matrix:
        runs-on: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js ðŸ“¥
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: "npm"

      - name: Install dependencies ðŸ“¥
        run: npm install

      - name: Build Binaries
        run: npm run build-${{ matrix.runs-on }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.runs-on }}
          path: ./compiled/

  Release:
    name: Create Release with Auto-Version
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./compiled/
          merge-multiple: true

      - name: Set up GitHub CLI
        uses: cli/cli-action@v2
        with:
          version: latest

      - name: Get latest version tag
        id: get_tag
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          new_version="v$major.$minor.$patch"

          echo "New version: $new_version"
          echo "new_tag=$new_version" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create "${{ steps.get_tag.outputs.new_tag }}" \
            --title "Release ${{ steps.get_tag.outputs.new_tag }}" \
            --generate-notes \
            --latest \
            ./compiled/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
